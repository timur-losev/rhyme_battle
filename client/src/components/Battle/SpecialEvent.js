import React, { useEffect } from 'react';
import PropTypes from 'prop-types';

const eventTypeIcons = {
  'double_points': '‚úñÔ∏è2',
  'card_restriction': 'üö´',
  'theme_change': 'üîÑ',
  'random_effect': 'üé≤'
};

const eventTypeColors = {
  'double_points': 'from-yellow-500 to-orange-600',
  'card_restriction': 'from-red-500 to-red-600',
  'theme_change': 'from-blue-500 to-indigo-600',
  'random_effect': 'from-purple-500 to-pink-600'
};

const SpecialEvent = ({ event, onClose }) => {
  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const timer = setTimeout(() => {
      if (onClose) {
        onClose();
      }
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div className="fixed top-0 left-0 right-0 flex justify-center items-start p-4 z-50 animate-slideDown">
      <div className={`bg-gradient-to-r ${eventTypeColors[event.eventType] || 'from-gray-700 to-gray-800'} 
                      rounded-lg shadow-lg p-4 max-w-md w-full`}>
        <div className="flex items-start">
          <div className="flex-shrink-0 p-3 mr-3 bg-black bg-opacity-30 rounded-full">
            <span className="text-2xl">{eventTypeIcons[event.eventType] || 'üéØ'}</span>
          </div>
          
          <div className="flex-1">
            <h3 className="text-xl font-bold mb-2 text-white">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—É–Ω–¥–µ {event.round}</h3>
            <p className="text-white mb-2">{event.description}</p>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è */}
            {event.eventType === 'double_points' && (
              <p className="text-yellow-200 text-sm italic">
                –í—Å–µ –æ—á–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ, –±—É–¥—É—Ç —É–¥–≤–æ–µ–Ω—ã!
              </p>
            )}
            
            {event.eventType === 'card_restriction' && (
              <p className="text-red-200 text-sm italic">
                –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!
              </p>
            )}
            
            {event.eventType === 'theme_change' && (
              <p className="text-blue-200 text-sm italic">
                –¢–µ–º–∞ –±–∞—Ç—Ç–ª–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã!
              </p>
            )}
            
            {event.eventType === 'random_effect' && (
              <p className="text-purple-200 text-sm italic">
                –°–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥!
              </p>
            )}
          </div>
          
          <button 
            onClick={onClose}
            className="ml-2 text-white hover:text-gray-300 p-1 focus:outline-none"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          >
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

SpecialEvent.propTypes = {
  event: PropTypes.shape({
    round: PropTypes.number.isRequired,
    eventType: PropTypes.oneOf(['double_points', 'card_restriction', 'theme_change', 'random_effect']).isRequired,
    description: PropTypes.string.isRequired,
    active: PropTypes.bool
  }).isRequired,
  onClose: PropTypes.func
};

export default SpecialEvent; 