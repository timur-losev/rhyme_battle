import React, { useEffect, useState, useRef } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, Link } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { GameProvider, useGame } from './contexts/GameContext';

import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import Profile from './pages/Profile';
import CardCollection from './pages/CardCollection';
import Battle from './pages/Battle';
import GameRoom from './pages/GameRoom';
import NotFound from './pages/NotFound';
import CardSelector from './components/Cards/CardSelector';
import TestCards from './pages/TestCards';

import Header from './components/UI/Header';
import Footer from './components/UI/Footer';
import PrivateRoute from './components/UI/PrivateRoute';

import './App.css';
import addDefaultCardImage from './utils/generateDefaultCard';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –í–∞–∂–Ω–æ: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É—Å–ª–æ–≤–Ω—ã—Ö —Ö—É–∫–æ–≤ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const CardsInitializer = () => {
  const { loadCards, cardsCollection, loading } = useGame();
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const initAttemptedRef = useRef(false);
  const loadTimeoutRef = useRef(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (initAttemptedRef.current) {
      console.log('üöÄ App: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç —É–∂–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Ä–∞–Ω–µ–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ –∫–∞—Ä—Ç—ã
    if (cardsCollection.length > 0) {
      console.log(`üöÄ App: –ö–∞—Ä—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${cardsCollection.length} —à—Ç.), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      initAttemptedRef.current = true;
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞
    if (loading) {
      console.log('üöÄ App: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ, –æ–∂–∏–¥–∞–µ–º');
      initAttemptedRef.current = true;
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞
    initAttemptedRef.current = true;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üöÄ App: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (loadTimeoutRef.current) {
      clearTimeout(loadTimeoutRef.current);
    }

    // –ë–µ–∑—É—Å–ª–æ–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º loadCards –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ö—É–∫–∞–º–∏
    // –Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ GameContext
    loadTimeoutRef.current = setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∫–∞—Ä—Ç—ã –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É
      if (cardsCollection.length === 0 && !loading) {
        console.log('üöÄ App: –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç');
        loadCards().then(cards => {
          console.log(`üöÄ App: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cards?.length || 0} –∫–∞—Ä—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
        }).catch(err => {
          console.error('üöÄ App: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        });
      } else {
        console.log('üöÄ App: –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - –∫–∞—Ä—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }
    }, 1000);

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (loadTimeoutRef.current) {
        clearTimeout(loadTimeoutRef.current);
      }
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  return null; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ
};

// –û–±–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
const TestBanner = ({ children }) => {
  const { cardsCollection, loading } = useGame();

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç
  const cardsStatus = (() => {
    if (loading) {
      return "‚è≥ –ó–ê–ì–†–£–ó–ö–ê –ö–ê–†–¢...";
    } else if (cardsCollection.length > 0) {
      return `‚úÖ –ö–ê–†–¢–´ –ó–ê–ì–†–£–ñ–ï–ù–´ (${cardsCollection.length} –®–¢.)`;
    } else {
      return "‚ùå –ö–ê–†–¢–´ –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´";
    }
  })();

  return (
    <div className="relative">
      {/* –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä */}
      <div className="fixed top-0 left-0 right-0 bg-red-600 text-white p-1 text-center z-50 text-sm">
        ‚ö†Ô∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø {/* - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–ê–†–¢ */}
        <span className="ml-2 px-2 py-0.5 rounded bg-red-800">
          {cardsStatus}
        </span>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ */}
      <div className="pt-6">
        {children}
      </div>
    </div>
  );
};

function App() {
  const [connectionError, setConnectionError] = useState(null);
  const [isReady, setIsReady] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const checkServerConnection = async () => {
      try {
        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5101';
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${apiUrl}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const response = await fetch(`${apiUrl}/api/health?t=${Date.now()}`, {
          method: 'GET',
          headers: { 'Cache-Control': 'no-cache' }
        });

        if (response.ok) {
          console.log('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!');
          setConnectionError(null);
        } else {
          console.error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥: ${response.status}`);
          setConnectionError(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
        setConnectionError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
      } finally {
        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–º–µ—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
        setIsReady(true);
      }
    };

    checkServerConnection();
  }, []);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    addDefaultCardImage();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
  // –≤—ã–Ω–æ—Å–∏–º –≤—Å—é –ª–æ–≥–∏–∫—É —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å —Ö—É–∫–∞–º–∏
  const renderContent = () => {
    if (!isReady) {
      return (
        <div className="flex h-screen bg-gray-900 text-white">
          <div className="m-auto text-center p-8">
            <h2 className="text-2xl font-bold mb-4">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</h2>
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          </div>
        </div>
      );
    }

    if (connectionError) {
      return (
        <div className="flex h-screen bg-gray-900 text-white">
          <div className="m-auto text-center p-8 max-w-xl">
            <h2 className="text-2xl font-bold mb-4 text-red-500">–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h2>
            <p className="mb-4">{connectionError}</p>
            <div className="bg-gray-800 p-4 rounded-lg text-left mb-4">
              <p className="font-bold mb-2">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
              <ul className="list-disc pl-5 mb-3">
                <li>–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω</li>
                <li>–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</li>
                <li>–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
                <li>–ü—Ä–æ–±–ª–µ–º—ã —Å CORS</li>
              </ul>
              <p className="font-bold mb-2">–†–µ—à–µ–Ω–∏—è:</p>
              <ul className="list-disc pl-5">
                <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (debug.bat)</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env</li>
                <li>–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä</li>
              </ul>
            </div>
            <div className="flex justify-center">
              <button
                onClick={() => window.location.reload()}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded mr-4"
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
              </button>
              <button
                onClick={() => {
                  setConnectionError(null);
                  setIsReady(true);
                }}
                className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
              </button>
            </div>
          </div>
        </div>
      );
    }

    return (
      <Router>
        <AuthProvider>
          <GameProvider>
            <TestBanner>
              <div className="min-h-screen flex flex-col bg-gray-900 text-white">
                <Header />
                <CardsInitializer /> {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç */}

                <main className="flex-grow container mx-auto px-4 py-8">
                  {process.env.REACT_APP_DEBUG === 'true' && (
                    <div className="mb-4 p-2 bg-blue-900 text-white rounded-lg text-sm">
                      <strong>üêû –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏</strong> –∞–∫—Ç–∏–≤–µ–Ω.
                      –°—Ä–µ–¥–∞: {process.env.NODE_ENV},
                      API: {process.env.REACT_APP_API_URL || 'http://localhost:5101'}
                    </div>
                  )}

                  <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/login" element={<Login />} />
                    <Route path="/register" element={<Register />} />
                    <Route path="/profile/:id" element={
                      <PrivateRoute>
                        <Profile />
                      </PrivateRoute>
                    } />
                    <Route path="/cards" element={
                      <PrivateRoute>
                        <CardCollection />
                      </PrivateRoute>
                    } />
                    <Route path="/battle" element={
                      <PrivateRoute>
                        <Battle />
                      </PrivateRoute>
                    } />
                    <Route path="/game/:roomId" element={
                      <PrivateRoute>
                        <GameRoom />
                      </PrivateRoute>
                    } />
                    <Route path="/test-cards" element={<TestCards />} />
                    <Route path="*" element={<NotFound />} />
                  </Routes>
                </main>

                {/* Footer —É–±—Ä–∞–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              </div>
            </TestBanner>
          </GameProvider>
        </AuthProvider>
      </Router>
    );
  };

  return renderContent();
}

export default App;
