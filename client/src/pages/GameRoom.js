import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useGame } from '../contexts/GameContext';
import { useAuth } from '../contexts/AuthContext';
import CardSelector from '../components/Cards/CardSelector';
import BattleArena from '../components/Battle/BattleArena';

const GameRoom = () => {
  const { roomId } = useParams();
  const navigate = useNavigate();
  const { currentUser } = useAuth();
  const { 
    joinRoom, 
    currentRoom, 
    gameStatus, 
    playerReady, 
    gameState, 
    isConnected,
    error,
    setError,
    resetGame,
    loadCards,
    cardsCollection,
    diagnoseSockets,
    socket,
    setGameStatus,
    isLoading,
    selectCardsForBattle,
    startBattle,
    throttledGetRoomState
  } = useGame();
  const [copied, setCopied] = useState(false);
  const [playersCount, setPlayersCount] = useState(0);
  const [loading, setLoading] = useState(false);
  const joinAttempted = useRef(false);
  const [prevPlayersCount, setPrevPlayersCount] = useState(0);
  const [logs, setLogs] = useState([]);
  const logsEndRef = useRef(null);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é leaveRoom
  const leaveRoom = () => {
    console.log('–ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    if (socket && socket.connected && currentRoom) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      socket.emit('leaveRoom', { roomId: currentRoom, userId: currentUser?.id });
      // –ë–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º resetGame() –Ω–∞–ø—Ä—è–º—É—é, —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ü–∏–∫–ª–∏—á–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º
      // –¢–µ–ø–µ—Ä—å –º—ã —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä—É, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ reset –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç—ã
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç
  const forceLoadCards = async () => {
    console.log('GameRoom: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç');
    try {
      // –í—ã–≤–æ–¥–∏–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞—Ä—Ç:');
      console.table({
        'ID –∫–æ–º–Ω–∞—Ç—ã': currentRoom || '–ù–µ—Ç',
        'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': currentUser?.id || '–ù–µ—Ç',
        '–°—Ç–∞—Ç—É—Å': gameStatus || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        '–¢–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã': cardsCollection?.length || 0
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ loadCards
      if (!loadCards || typeof loadCards !== 'function') {
        console.error('GameRoom: –§—É–Ω–∫—Ü–∏—è loadCards –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!', { loadCards });
        return null;
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç —Å —è–≤–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (this)
      const cards = await loadCards();
      
      console.log(`GameRoom: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cards?.length || 0} –∫–∞—Ä—Ç`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
      if (!cards || cards.length === 0) {
        console.error('GameRoom: –ö–∞—Ä—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      }
      
      return cards;
    } catch (err) {
      console.error('GameRoom: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', err);
      return null;
    }
  };

  useEffect(() => {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (!cardsCollection || cardsCollection.length === 0) {
      console.log('üî¥ GameRoom: –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      forceLoadCards();
      
      // –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        if (!cardsCollection || cardsCollection.length === 0) {
          console.log('üî¥ GameRoom: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É');
          forceLoadCards();
        }
      }, 1000);
      
      setTimeout(() => {
        if (!cardsCollection || cardsCollection.length === 0) {
          console.log('üî¥ GameRoom: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã');
          forceLoadCards();
        }
      }, 3000);
    } else {
      console.log(`‚úÖ GameRoom: –ö–∞—Ä—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${cardsCollection.length} —à—Ç—É–∫)`);
    }
  }, [cardsCollection]);

  // forceRefreshState –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
  const forceRefreshState = useCallback(() => {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
    
    if (!currentRoom) {
      console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }
    
    if (!socket || !socket.connected) {
      console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      return;
    }
    
    try {
      console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º getRoomState –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${currentRoom}`);
      socket.emit('getRoomState', { roomId: currentRoom });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', err);
    }
  }, [currentRoom, socket]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prevLogs => [...prevLogs, { timestamp, message, type }]);
  };

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (!roomId) {
      setError('ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
      navigate('/');
      return;
    }

    if (!currentUser) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      navigate('/login');
      return;
    }

    console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
    addLog(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å ID: ${roomId}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º joinRoom –≤–º–µ—Å—Ç–æ connectToRoom
    joinRoom(roomId);
    
    // –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const initialUpdateTimer = setTimeout(() => {
      console.log(`–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${roomId}`);
      throttledGetRoomState(roomId);
    }, 1000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
  
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return () => {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã');
      clearTimeout(initialUpdateTimer);
      leaveRoom();
    };
  }, [roomId, currentUser, joinRoom, navigate, setError, socket, currentRoom]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  const refreshRoomState = useCallback(() => {
    if (isConnected && currentRoom) {
      console.log('–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', currentRoom);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º socket –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ diagnoseSocket
      const socketStatus = diagnoseSockets();
      
      if (socketStatus.connected) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        throttledGetRoomState(currentRoom);
      } else {
        console.log('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        alert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      }
    }
  }, [isConnected, currentRoom, diagnoseSockets, socket, throttledGetRoomState]);

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  useEffect(() => {
    if (isConnected && roomId && !joinAttempted.current) {
      console.log('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
      joinAttempted.current = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞
      joinRoom(roomId);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä
      const autoUpdateTimer = setTimeout(() => {
        console.log('–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        forceRefreshState();
      }, 2000); // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
      
      return () => {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        clearTimeout(autoUpdateTimer);
      };
    }
  }, [isConnected, roomId, joinRoom, forceRefreshState]);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ URL
  useEffect(() => {
    // –ï—Å–ª–∏ –º—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ roomId –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
    if (isConnected && roomId && currentRoom !== roomId) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã –≤ URL –∏ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã');
      joinRoom(roomId);
    }
    
    // –ï—Å–ª–∏ –º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–º–Ω–∞—Ç–µ, –Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
    if (isConnected && currentRoom && gameState && gameState.players && 
        gameState.players.length > playersCount) {
      console.log('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      setPlayersCount(gameState.players.length);
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å waiting, –Ω–æ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (gameStatus === 'waiting' && gameState.players.length === 2) {
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ selecting_cards');
        setGameStatus('selecting_cards');
      } 
    }
  }, [isConnected, roomId, currentRoom, gameState, playersCount, gameStatus, setGameStatus, joinRoom]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥,
  // —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  const autoUpdateIntervalRef = useRef(null);
  
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (autoUpdateIntervalRef.current) {
      clearInterval(autoUpdateIntervalRef.current);
      autoUpdateIntervalRef.current = null;
    }
    
    if (isConnected && currentRoom && socket) {
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      autoUpdateIntervalRef.current = setInterval(() => {
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã');
        throttledGetRoomState(currentRoom); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å throttle –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (autoUpdateIntervalRef.current) {
        console.log('–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        clearInterval(autoUpdateIntervalRef.current);
        autoUpdateIntervalRef.current = null;
      }
    };
  }, [isConnected, currentRoom, socket, throttledGetRoomState]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ gameState
  useEffect(() => {
    if (!gameState) {
      console.log('GameRoom: gameState –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    console.log('GameRoom: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ gameState:', gameState);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ gameState
    console.log('GameRoom: –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ gameState:',
      '\n - status:', gameState.status,
      '\n - players:', gameState.players ? gameState.players.length : 0,
      '\n - playersCount:', gameState.playersCount,
      '\n - currentRoom:', currentRoom,
      '\n - gameStatus:', gameStatus
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (gameState.players && gameState.players.length !== playersCount) {
      console.log('GameRoom: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤:', gameState.players.length);
      setPlayersCount(gameState.players.length);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (gameState.players && gameState.players.length > playersCount) {
      console.log('GameRoom: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤');
      setPlayersCount(gameState.players.length);
      forceRefreshState();
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –ø—Ä–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏
    if (gameState.status && gameState.status !== gameStatus) {
      console.log('GameRoom: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', gameState.status, '—Ç–µ–∫—É—â–∏–π:', gameStatus);
      setGameStatus(gameState.status);
    }
  }, [gameState, gameStatus, playersCount, setGameStatus, forceRefreshState, currentRoom]);

  // –î–æ–±–∞–≤–ª—è–µ–º useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
  useEffect(() => {
    console.log('GameRoom: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã:', gameStatus);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∫–∞—Ä—Ç—ã, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    if ((gameStatus === 'selecting_cards' || gameStatus === 'cards_selection') && cardsCollection.length === 0) {
      console.log('GameRoom: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç');
      loadCards();
    }
  }, [gameStatus, cardsCollection.length, loadCards]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    if (gameState && gameState.players) {
      const newCount = gameState.players.length;
      if (playersCount !== newCount) {
        setPlayersCount(newCount);
        console.log('GameRoom: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤:', newCount);
      }
    }
  }, [gameState?.players?.length, playersCount]);
  
  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç
  useEffect(() => {
    // –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    console.log('GameRoom: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Ä—Ç. –°—Ç–∞—Ç—É—Å:', gameStatus, '–ö–∞—Ä—Ç:', cardsCollection.length);
    
    if (cardsCollection.length === 0 && !loading) {
      console.log('GameRoom: –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç');
      loadCards().then(cards => {
        console.log(`GameRoom: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cards?.length || 0} –∫–∞—Ä—Ç`);
      }).catch(err => {
        console.error('GameRoom: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', err);
      });
    } else {
      console.log(`GameRoom: –ö–∞—Ä—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${cardsCollection.length} —à—Ç.)`);
    }
  }, []);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    if ((gameStatus === 'battle' || gameStatus === 'selecting_cards' || gameStatus === 'cards_selection') 
        && cardsCollection.length === 0 && !loading) {
      console.log('GameRoom: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã –Ω–∞:', gameStatus);
      loadCards();
    }
  }, [gameStatus, cardsCollection.length, loading, loadCards]);

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –∫–æ–º–Ω–∞—Ç—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyRoomId = () => {
    navigator.clipboard.writeText(roomId);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
  const handleLeaveGame = () => {
    resetGame();
    navigate('/battle');
  };

  if (!isConnected) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <div className="text-2xl mb-4">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</div>
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  if (error) {
    return (
      <div className="bg-red-900 bg-opacity-50 p-6 rounded-lg mx-auto max-w-3xl text-center">
        <h2 className="text-2xl font-bold mb-4">–û—à–∏–±–∫–∞</h2>
        <p className="mb-4">{error}</p>
        <button 
          onClick={handleLeaveGame}
          className="bg-red-600 hover:bg-red-700 px-6 py-2 rounded text-white"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
        </button>
      </div>
    );
  }

  return (
    <div className="game-room">
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className="mt-8 p-4 bg-red-900 text-white rounded-lg border-2 border-red-600">
        <h3 className="text-xl font-bold mb-2">‚ö†Ô∏è –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</h3>
        <div className="grid grid-cols-2 gap-2 mb-4">
          <div>
            <p><strong>ID –∫–æ–º–Ω–∞—Ç—ã:</strong> {currentRoom || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:</strong> {gameStatus || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <p><strong>–ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:</strong> {cardsCollection && cardsCollection.length > 0 ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:</strong> {cardsCollection?.length || 0}</p>
            <p><strong>–ó–∞–≥—Ä—É–∑–∫–∞:</strong> {loading ? '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'}</p>
          </div>
          <div>
            <p><strong>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:</strong> {socket?.connected ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</p>
            <p><strong>ID —Å–æ–∫–µ—Ç–∞:</strong> {socket?.id || '–Ω–µ—Ç'}</p>
            <p><strong>–ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤:</strong> {playerReady ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
            <p><strong>–û—à–∏–±–∫–∏:</strong> {error ? '‚ùå ' + error : '‚úÖ –ù–µ—Ç'}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> {new Date().toLocaleTimeString()}</p>
          </div>
        </div>
        
        <div className="mt-4 flex space-x-4">
          <button
            onClick={(e) => {
              e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
              e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
              console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º –±–ª–æ–∫–µ');
              
              // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º forceLoadCards –≤–º–µ—Å—Ç–æ loadCards
              forceLoadCards().then(cards => {
                console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cards?.length || 0} –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –æ—Ç–ª–∞–¥–∫–∏`);
              }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –æ—Ç–ª–∞–¥–∫–∏:', err);
              });
            }}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm"
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è');
              if (socket && socket.connected && currentRoom) {
                socket.emit('getRoomState', { roomId: currentRoom });
                console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${currentRoom}`);
              } else {
                console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ ID –∫–æ–º–Ω–∞—Ç—ã');
              }
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          </button>
          <button
            onClick={() => window.location.reload()}
            className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm"
          >
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex flex-col md:flex-row justify-between items-start mb-6">
        <h1 className="text-3xl font-bold">–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞</h1>
        <div className="mt-4 md:mt-0 flex items-center space-x-4">
          <button
            className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors"
            onClick={handleLeaveGame}
          >
            –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã
          </button>
          <div className="flex items-center">
            <span className="text-gray-400 mr-2">ID –∫–æ–º–Ω–∞—Ç—ã:</span>
            <div className="relative">
              <span className="bg-gray-800 px-3 py-1 rounded">{roomId}</span>
              <button
                className="ml-2 bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-sm"
                onClick={copyRoomId}
              >
                {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å */}
      <div className="bg-gray-800 rounded-lg p-6 mb-8">
        <div className="flex flex-wrap justify-between items-center mb-4">
          <h1 className="text-3xl font-bold">–ö–æ–º–Ω–∞—Ç–∞ #{roomId}</h1>
          
          <div className="flex space-x-4">
            <button 
              onClick={refreshRoomState}
              className="bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white flex items-center"
              title="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
            >
              <svg className="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            
            <button 
              onClick={copyRoomId}
              className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded text-white flex items-center"
            >
              {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID'}
              <svg className="ml-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
              </svg>
            </button>
            
            <button 
              onClick={handleLeaveGame}
              className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded text-white"
            >
              –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É
            </button>
          </div>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã */}
        <div className="flex flex-wrap justify-between items-center">
          <div className="mb-2 md:mb-0">
            <span className="font-semibold mr-2">–°—Ç–∞—Ç—É—Å:</span>
            <StatusBadge status={gameStatus} />
          </div>
          
          {gameState && (
            <div className="flex flex-wrap space-x-4">
              <div>
                <span className="font-semibold mr-2">–ò–≥—Ä–æ–∫–æ–≤:</span>
                <span>{playersCount}/2</span>
              </div>
              
              {gameStatus === 'battle' && (
                <div>
                  <span className="font-semibold mr-2">–†–∞—É–Ω–¥:</span>
                  <span>{gameState.currentTurn.round}/3</span>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –¢–µ–ª–æ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ */}
      {gameStatus === 'waiting' && (
        <WaitingRoom roomId={roomId} />
      )}
      
      {gameStatus === 'selecting_cards' && (
        <div>
          <h2 className="text-2xl font-bold mb-4">–í—ã–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è –±–∞—Ç—Ç–ª–∞</h2>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ */}
          {gameState && gameState.players && (
            <div className="bg-gray-800 p-4 rounded-lg mb-4">
              <h3 className="text-xl font-bold mb-2">–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤:</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {gameState.players.map((player, index) => (
                  <div key={player.userId} className="bg-gray-700 p-3 rounded-lg flex justify-between items-center">
                    <div>
                      <span className="font-bold mr-2">–ò–≥—Ä–æ–∫ {index + 1}</span>
                      {player.userId === currentUser.id && (
                        <span className="text-green-400 text-sm">(–í—ã)</span>
                      )}
                    </div>
                    
                    <div>
                      {player.isReady ? (
                        <span className="bg-green-600 text-white px-3 py-1 rounded-full text-sm">–ì–æ—Ç–æ–≤</span>
                      ) : (
                        <span className="bg-yellow-600 text-white px-3 py-1 rounded-full text-sm">–í—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <CardSelector />
        </div>
      )}
      
      {gameStatus === 'battle' && (
        <div>
          <h2 className="text-2xl font-bold mb-4">–ë–∞—Ç—Ç–ª</h2>
          <BattleArena />
        </div>
      )}
      
      {gameStatus === 'ended' && gameState && (
        <GameResults 
          results={gameState} 
          userId={currentUser.id} 
          onPlayAgain={handleLeaveGame} 
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
const StatusBadge = ({ status }) => {
  const getStatusInfo = () => {
    switch(status) {
      case 'waiting':
        return { label: '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤', bgColor: 'bg-yellow-600' };
      case 'selecting_cards':
      case 'cards_selection': // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è
        return { label: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç', bgColor: 'bg-blue-600' };
      case 'battle':
        return { label: '–ë–∞—Ç—Ç–ª', bgColor: 'bg-red-600' };
      case 'ended':
      case 'finished': // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è
        return { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', bgColor: 'bg-green-600' };
      default:
        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${status}"`);
        return { label: status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', bgColor: 'bg-gray-600' };
    }
  };
  
  const statusInfo = getStatusInfo();
  
  return (
    <span className={`${statusInfo.bgColor} text-white px-3 py-1 rounded-full`}>
      {statusInfo.label}
    </span>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è
const WaitingRoom = ({ roomId }) => {
  return (
    <div className="bg-gray-800 p-8 rounded-lg text-center">
      <h2 className="text-2xl font-bold mb-6">–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞</h2>
      
      <div className="animate-pulse mb-6">
        <div className="inline-block w-16 h-16 bg-yellow-600 rounded-full"></div>
      </div>
      
      <p className="text-lg mb-8">
        –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É ID –∫–æ–º–Ω–∞—Ç—ã: 
        <span className="font-mono bg-gray-700 px-2 py-1 rounded ml-2">{roomId}</span>
      </p>
      
      <div className="bg-gray-700 p-4 rounded-lg max-w-lg mx-auto">
        <p className="text-sm text-gray-300">
          –û–ø–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–∞—Ç—Ç–ª–∞
          –∏ –≤–≤–µ—Å—Ç–∏ ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.
        </p>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
const GameResults = ({ results, userId, onPlayAgain }) => {
  const isWinner = results.winner && results.winner.userId === userId;
  
  return (
    <div className={`${isWinner ? 'bg-green-900' : 'bg-red-900'} bg-opacity-40 p-8 rounded-lg text-center`}>
      <h2 className="text-3xl font-bold mb-6">
        {isWinner ? 'üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üèÜ' : 'üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû'}
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div className="bg-gray-800 p-4 rounded-lg">
          <h3 className="text-xl font-bold mb-2">–í–∞—à —Å—á—ë—Ç</h3>
          <p className="text-3xl font-bold">
            {isWinner ? results.winner.score : results.loser.score}
          </p>
        </div>
        
        <div className="bg-gray-800 p-4 rounded-lg">
          <h3 className="text-xl font-bold mb-2">–°—á—ë—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</h3>
          <p className="text-3xl font-bold">
            {isWinner ? results.loser.score : results.winner.score}
          </p>
        </div>
      </div>
      
      <button 
        onClick={onPlayAgain}
        className="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-lg text-white text-lg font-bold"
      >
        –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
      </button>
    </div>
  );
};

export default GameRoom; 